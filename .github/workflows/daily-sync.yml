name: Daily Yu-Gi-Oh Database Sync

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main, master ]
    paths: 
      - '.github/workflows/daily-sync.yml'
      - 'package.json'
      - 'yarn.lock'

env:
  NODE_VERSION: '22'
  DATABASE_FILE: 'yugioh-superdb.sqlite'
  TRANSLATION_FILE: 'translation.json'
  RELEASE_ARCHIVE: 'yugioh-superdb.zip'

jobs:
  sync-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run database sync
      id: sync
      run: |
        # Capture both stdout and stderr with timestamps
        exec > >(tee -a sync_output.log)
        exec 2> >(tee -a sync_error.log >&2)
        
        echo "=== Yu-Gi-Oh Database Sync Started at $(date) ==="
        
        # Run the sync script and capture exit code
        if node index.js; then
          echo "SYNC_SUCCESS=true" >> $GITHUB_ENV
          echo "=== Sync completed successfully at $(date) ==="
        else
          echo "SYNC_SUCCESS=false" >> $GITHUB_ENV
          echo "=== Sync failed at $(date) ==="
          exit 1
        fi
      continue-on-error: true
      
    - name: Analyze logs for warnings and errors
      run: |
        # Check for warnings and errors in the output using safer patterns
        HAS_WARNINGS=false
        HAS_ERRORS=false
        
        if [ -f sync_output.log ]; then
          # Look for actual error/warning log patterns (start of line or after timestamp)
          # This avoids matching words like "error" in card names or descriptions
          if grep -E "^(ERROR|WARN|WARNING):|^\[[0-9T:.-]+\] (ERROR|WARN|WARNING):|^Error:|^Warning:|Exception in|Uncaught|Failed to|Cannot|Unable to|Connection.*failed|Timeout|SCRAPING_ERROR" sync_output.log | grep -v -E "no data found|NO_DATA_FOUND" > /dev/null; then
            HAS_WARNINGS=true
          fi
          # Check for actual errors (more restrictive patterns)
          if grep -E "^ERROR:|^\[[0-9T:.-]+\] ERROR:|^Error:|Exception in|Uncaught|Failed to.*critical|SCRAPING_ERROR|Process.*failed|Database.*error|Connection.*timeout" sync_output.log | grep -v -E "no data found|NO_DATA_FOUND" > /dev/null; then
            HAS_ERRORS=true
          fi
        fi
        
        if [ -f sync_error.log ] && [ -s sync_error.log ]; then
          # Count lines that are NOT "no data found" related and not empty
          ERROR_LINES=$(grep -v -E "no data found|NO_DATA_FOUND|Card.*No data found" sync_error.log | grep -v "^$" | wc -l)
          
          if [ "$ERROR_LINES" -gt 0 ]; then
            # Check if stderr contains actual error patterns (not just words in data)
            if grep -v -E "no data found|NO_DATA_FOUND|Card.*No data found" sync_error.log | grep -E "^(ERROR|Error):|Exception:|Uncaught|Failed|Cannot|Unable|Connection.*failed|Timeout|SCRAPING_ERROR|Process.*failed" > /dev/null; then
              HAS_ERRORS=true
            else
              # If there's other content that's not "no data found", treat as warnings only if it looks like actual log messages
              if grep -v -E "no data found|NO_DATA_FOUND|Card.*No data found" sync_error.log | grep -E "^(WARN|WARNING|Info):|^\[[0-9T:.-]+\]|Deprecated|Notice:" > /dev/null; then
                HAS_WARNINGS=true
              fi
            fi
          fi
        fi
        
        echo "HAS_WARNINGS=$HAS_WARNINGS" >> $GITHUB_ENV
        echo "HAS_ERRORS=$HAS_ERRORS" >> $GITHUB_ENV
        echo "Detected - Warnings: $HAS_WARNINGS, Errors: $HAS_ERRORS"
        
        # Combine logs for email (filter out excessive "no data found" messages)
        {
          echo "=== STDOUT OUTPUT ==="
          if [ -f sync_output.log ]; then
            cat sync_output.log
          else
            echo "No stdout output captured"
          fi
          echo ""
          echo "=== STDERR OUTPUT ==="
          if [ -f sync_error.log ]; then
            # Count "no data found" related messages
            no_data_count=$(grep -c -E "no data found|NO_DATA_FOUND|Card.*No data found" sync_error.log || echo "0")
            if [ "$no_data_count" -gt 20 ]; then
              echo "Found $no_data_count 'no data found' messages (showing first 10 and last 10):"
              grep -E "no data found|NO_DATA_FOUND|Card.*No data found" sync_error.log | head -10
              echo "... ($((no_data_count - 20)) messages omitted) ..."
              grep -E "no data found|NO_DATA_FOUND|Card.*No data found" sync_error.log | tail -10
              echo ""
              echo "Other stderr content:"
              grep -v -E "no data found|NO_DATA_FOUND|Card.*No data found" sync_error.log || echo "No other stderr content"
            else
              cat sync_error.log
            fi
          else
            echo "No stderr output captured"
          fi
        } > combined_logs.txt
        
    - name: Check for database updates
      run: |
        # Since the scraper handles all file operations and creates the zip,
        # we simply check if the files were updated in dist/assets
        if [ -f "dist/assets/${{ env.RELEASE_ARCHIVE }}" ]; then
          echo "DATABASE_CHANGED=true" >> $GITHUB_ENV
          echo "Database files have been updated by the scraper"
        else
          echo "DATABASE_CHANGED=false" >> $GITHUB_ENV
          echo "No database updates found"
        fi
        
    - name: Get database statistics
      id: stats
      run: |
        # Install sqlite3 to query the database
        sudo apt-get update && sudo apt-get install -y sqlite3
        
        if [ -f "dist/assets/${{ env.DATABASE_FILE }}" ]; then
          {
            echo "=== Database Statistics ==="
            echo "File size: $(ls -lh dist/assets/${{ env.DATABASE_FILE }} | awk '{print $5}')"
            echo "Last modified: $(stat -c %y dist/assets/${{ env.DATABASE_FILE }})"
            echo ""
            
            # Get table counts
            sqlite3 "dist/assets/${{ env.DATABASE_FILE }}" "
            SELECT 'Total tables: ' || COUNT(*) FROM sqlite_master WHERE type='table';
            " 2>/dev/null || echo "Could not query table count"
            
            # Try to get card count if card table exists
            sqlite3 "dist/assets/${{ env.DATABASE_FILE }}" "
            SELECT 'Total cards: ' || COUNT(*) FROM card;
            " 2>/dev/null || echo "Card table not accessible or doesn't exist"

            # Try to get localization count
            sqlite3 "dist/assets/${{ env.DATABASE_FILE }}" "
            SELECT 'Total localizations: ' || COUNT(*) FROM localization;
            " 2>/dev/null || echo "Localization table not accessible or doesn't exist"
            
        } > db_stats.txt
        
        # Output the statistics as a step output and environment variable
        DB_STATS=$(cat db_stats.txt)
        echo "DATABASE_STATS<<EOF" >> $GITHUB_ENV
        echo "$DB_STATS" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        else
          echo "Database file not found in assets" > db_stats.txt
          echo "DATABASE_STATS=Database file not found in assets" >> $GITHUB_ENV
        fi

    - name: Commit updated database files
      if: env.DATABASE_CHANGED == 'true'
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add files to git (scraper already placed them in dist/assets)
        git add dist/assets/
        
        # Generate version based on date for commit message
        VERSION="v$(date +'%Y.%m.%d')"
        
        # If we've already committed today, append time
        if git log --oneline --since="today" --grep="Database update $VERSION" | grep -q "Database update $VERSION"; then
          VERSION="$VERSION-$(date +'%H%M')"
        fi
        
        # Commit the changes
        git commit -m "Database update $VERSION

        - Updated yugioh-superdb.sqlite with latest card data
        - Updated translation.json
        - Files updated by automated sync process
        
        Automated update from daily sync workflow"
        
        # Create and push tag
        git tag "$VERSION"
        git push origin ${{ github.ref_name }}
        git push origin "$VERSION"
        
        # Set version for later steps
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Send success notification email
      if: env.DATABASE_CHANGED == 'true' && env.SYNC_SUCCESS == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "✅ Yu-Gi-Oh Database Updated - Version ${{ env.RELEASE_VERSION }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
        body: |
          The Yu-Gi-Oh database has been successfully updated!
          
          🎉 **New Version Committed:** ${{ env.RELEASE_VERSION }}
          
          📊 **Summary:**
          - Sync completed successfully
          - Database changes detected and committed to main branch
          - Updated files available in dist/assets/
          
          🔗 **Links:**
          - Tag: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.RELEASE_VERSION }}
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Database: https://${{ github.repository_owner }}.github.io/yugioh-superdb/dist/assets/yugioh-superdb.zip
          
          📈 **Database Info:**
          ${{ env.DATABASE_STATS }}
        attachments: combined_logs.txt,db_stats.txt
        
    - name: Send warning notification email
      if: env.HAS_WARNINGS == 'true' && env.HAS_ERRORS == 'false'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "⚠️ Yu-Gi-Oh Database Sync Completed with Warnings"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
        body: |
          The Yu-Gi-Oh database sync completed but with warnings.
          
          ⚠️ **Status:** Completed with warnings
          🗃️ **Database Changed:** ${{ env.DATABASE_CHANGED }}
          
          📋 **Details:**
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Check the attached logs for warning details
          
          Please review the warnings in the attached log file.
        attachments: combined_logs.txt
        
    - name: Send failure notification email
      if: env.SYNC_SUCCESS == 'false' || env.HAS_ERRORS == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "🚨 Yu-Gi-Oh Database Sync Failed"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
        body: |
          The Yu-Gi-Oh database sync has failed!
          
          🚨 **Status:** Failed
          🗃️ **Database Changed:** ${{ env.DATABASE_CHANGED }}
          
          📋 **Error Details:**
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Sync success: ${{ env.SYNC_SUCCESS }}
          - Has errors: ${{ env.HAS_ERRORS }}
          
          Please check the attached logs for error details and take appropriate action.
          
          The workflow may need manual intervention.
        attachments: combined_logs.txt
