name: Daily Yu-Gi-Oh Database Sync

on:
  schedule:
    # Run daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main, master ]
    paths: 
      - '.github/workflows/daily-sync.yml'
      - 'package.json'
      - 'yarn.lock'

env:
  NODE_VERSION: '22'
  DATABASE_FILE: 'yugioh-superdb.sqlite'
  TRANSLATION_FILE: 'translation.json'

jobs:
  sync-database:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run database sync
      id: sync
      run: |
        # Capture stdout and stderr
        exec > >(tee -a sync_output.log)
        exec 2> >(tee -a sync_error.log >&2)
        
        echo "=== Yu-Gi-Oh Database Sync Started at $(date) ==="
        
        # Run the sync script with report generation and capture exit code
        if node src/index.js --report; then
          echo "SCRIPT_SUCCESS=true" >> $GITHUB_ENV
          echo "=== Sync script completed successfully at $(date) ==="
        else
          echo "SCRIPT_SUCCESS=false" >> $GITHUB_ENV
          echo "=== Sync script failed at $(date) ==="
        fi
      continue-on-error: true
      
    - name: Process sync report
      id: report
      run: |
        if [ -f sync-report.json ]; then
          # Install jq to parse the JSON report
          sudo apt-get update && sudo apt-get install -y jq

          # Parse report and set environment variables
          SUCCESS=$(jq -r .success sync-report.json)
          ERRORS=$(jq -r .errors sync-report.json)
          WARNINGS=$(jq -r .warnings sync-report.json)
          
          echo "SYNC_SUCCESS=$SUCCESS" >> $GITHUB_ENV
          echo "HAS_ERRORS=$( [ "$ERRORS" -gt 0 ] && echo "true" || echo "false" )" >> $GITHUB_ENV
          echo "HAS_WARNINGS=$( [ "$WARNINGS" -gt 0 ] && echo "true" || echo "false" )" >> $GITHUB_ENV
          
          echo "Report processed: SUCCESS=$SUCCESS, ERRORS=$ERRORS, WARNINGS=$WARNINGS"
        else
          echo "sync-report.json not found. Assuming failure."
          echo "SYNC_SUCCESS=false" >> $GITHUB_ENV
          echo "HAS_ERRORS=true" >> $GITHUB_ENV
          echo "HAS_WARNINGS=false" >> $GITHUB_ENV
        fi
        
        # Combine logs for email attachment
        {
          echo "=== STDOUT OUTPUT ==="
          if [ -f sync_output.log ]; then cat sync_output.log; else echo "No stdout."; fi
          echo ""
          echo "=== STDERR OUTPUT ==="
          if [ -f sync_error.log ]; then cat sync_error.log; else echo "No stderr."; fi
        } > combined_logs.txt

    - name: Check for database updates
      id: check_changes
      run: |
        if git status --porcelain | grep -q "dist/assets"; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

    - name: Commit updated database files
      if: steps.check_changes.outputs.changed == 'true'
      run: |
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Add files to git (scraper already placed them in dist/assets)
        git add dist/assets/
        
        # Generate version based on date for commit message
        VERSION="v$(date +'%Y.%m.%d')"
        
        # If we've already committed today, append time
        if git log --oneline --since="today" --grep="Database update $VERSION" | grep -q "Database update $VERSION"; then
          VERSION="$VERSION-$(date +'%H%M')"
        fi
        
        # Commit the changes with [skip ci] to prevent re-triggering
        git commit -m "Automated database update $VERSION [skip ci]"
        
        # Create and push tag
        git tag "$VERSION"
        git push origin ${{ github.ref_name }}
        git push origin "$VERSION"
        
        # Set version for later steps
        echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
        
    - name: Send success notification email
      if: steps.check_changes.outputs.changed == 'true' && env.SYNC_SUCCESS == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "‚úÖ Yu-Gi-Oh Database Updated - Version ${{ env.RELEASE_VERSION }}"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
        body: |
          The Yu-Gi-Oh database has been successfully updated!
          
          üéâ **New Version Committed:** ${{ env.RELEASE_VERSION }}
          
          üìä **Summary:**
          - Sync completed successfully
          - Database changes detected and committed to main branch
          - Updated files available in dist/assets/
          
          üîó **Links:**
          - Tag: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.RELEASE_VERSION }}
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Database: https://${{ github.repository_owner }}.github.io/yugioh-superdb/dist/assets/yugioh-superdb.sqlite
        attachments: combined_logs.txt
        
    - name: Send warning notification email
      if: env.HAS_WARNINGS == 'true' && env.HAS_ERRORS == 'false'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "‚ö†Ô∏è Yu-Gi-Oh Database Sync Completed with Warnings"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
        body: |
          The Yu-Gi-Oh database sync completed but with warnings.
          
          ‚ö†Ô∏è **Status:** Completed with warnings
          üóÉÔ∏è **Database Changed:** ${{ steps.check_changes.outputs.changed }}
          
          üìã **Details:**
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Check the attached logs for warning details
          
          Please review the warnings in the attached log file.
        attachments: combined_logs.txt
        
    - name: Send failure notification email
      if: env.SYNC_SUCCESS == 'false' || env.HAS_ERRORS == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: ${{ secrets.SMTP_SERVER }}
        server_port: ${{ secrets.SMTP_PORT }}
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "üö® Yu-Gi-Oh Database Sync Failed"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: ${{ secrets.SMTP_FROM || secrets.SMTP_USERNAME }}
        body: |
          The Yu-Gi-Oh database sync has failed!
          
          üö® **Status:** Failed
          üóÉÔ∏è **Database Changed:** ${{ steps.check_changes.outputs.changed }}
          
          üìã **Error Details:**
          - Workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - Sync success: ${{ env.SYNC_SUCCESS }}
          - Has errors: ${{ env.HAS_ERRORS }}
          
          Please check the attached logs for error details and take appropriate action.
          
          The workflow may need manual intervention.
        attachments: combined_logs.txt
